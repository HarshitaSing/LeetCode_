class Solution {

static class Pair implements Comparable<Pair>{
    int first;
    int second;
    Pair(int first, int second){
        this.first= first;
        this.second= second;
    }
    public int compareTo(Pair o){
        return this.first-o.first;
    }
}


public int[] topKFrequent(int[] arr, int k) {
    
    HashMap<Integer, Integer> map = new HashMap<>();
    PriorityQueue<Pair> min_heap = new PriorityQueue<>();
    int ans[]= new int[k];
    
    for(int a: arr)
        map.put(a, map.getOrDefault(a,0)+1);
        
    for(Map.Entry<Integer,Integer> e: map.entrySet()){
        min_heap.add(new Pair(e.getValue(), e.getKey()));
        
        if(min_heap.size()>k)
            min_heap.remove();
    }
    
    int i=0;
    while(!min_heap.isEmpty())
    {
        ans[i] = min_heap.remove().second;
        i++;
    }
    
    return ans;

}
}